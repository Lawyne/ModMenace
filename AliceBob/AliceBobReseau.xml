<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.

const int N = 2;
typedef int[0,N-1] id_a;

// type def
const int PROB = 0;
const int ANSWER = 1;
const int COMM = 2;


// gen def
const int NOGEN = 0;
const int GEN = 1;

//public_comp def
const int NOCOMP = 0;

//key def
const int NOKEY = 0;

//content def
const int NOCONTENT = 0;
const int CONTENT = 1;

typedef struct {
    int sender;
    int receiver;
    int type;
    int gen;
    int comp;
    int key;
    int content;
} message;
message M = {0,0,0,0,0,0,0};

chan in[N], out[N];</declaration>
	<template>
		<name x="5" y="5">Acteur</name>
		<parameter>const id_a id</parameter>
		<declaration>// Place local declarations here.

//1 for Alice, 2 for Bob
const int PRIVATE_KEY = id + 1;
int shared_key;

int findCorrespondent(){
    if (id == 0)    {return 1;}    else    {return 0;}
}

const int CORRESPONDENT = findCorrespondent();




void createMessage(int a, int b, int c, int d, int e)
{
    M.sender = id;
    M.receiver = CORRESPONDENT;
    M.type = a;
    M.gen = b;
    M.comp = c;
    M.key = d;
    M.content = e;
}

int forgePublicComp(int gen){return (gen + PRIVATE_KEY);}

void forgeKey(int comp){shared_key= PRIVATE_KEY + comp;}

void prob(){createMessage(PROB,GEN,forgePublicComp(GEN),NOKEY,NOCONTENT);}

void answerProb(){createMessage(ANSWER,GEN,forgePublicComp(GEN),NOKEY,NOCONTENT);}

void sendMessage(){createMessage(COMM,NOGEN,NOCOMP,shared_key,CONTENT);}

void receive()
{
    if (M.type == PROB &amp;&amp; M.gen == GEN){
        forgeKey(M.comp);
        }
    else
        if (M.type == ANSWER &amp;&amp; M.gen == GEN)
            {
                forgeKey(M.comp);
            }
}



</declaration>
		<location id="id0" x="238" y="-450">
			<name x="196" y="-442">SENDING_MESSAGE</name>
			<committed/>
		</location>
		<location id="id1" x="51" y="-297">
			<name x="51" y="-288">ANSWERING_PROB</name>
			<committed/>
		</location>
		<location id="id2" x="-467" y="-620">
			<name x="-484" y="-654">UNWANTED</name>
		</location>
		<location id="id3" x="51" y="-450">
			<name x="-26" y="-484">COMM_CHANNEL</name>
		</location>
		<location id="id4" x="-102" y="-297">
			<name x="-144" y="-331">RECEIVED_PROB</name>
		</location>
		<location id="id5" x="-255" y="-442">
			<name x="-263" y="-476">INITIATED_PROB</name>
		</location>
		<location id="id6" x="-255" y="-297">
			<name x="-265" y="-331">INIT</name>
		</location>
		<init ref="id6"/>
		<transition>
			<source ref="id4"/>
			<target ref="id1"/>
			<label kind="assignment" x="-68" y="-289">answerProb()</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="assignment" x="102" y="-476">sendMessage()</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id2"/>
			<label kind="guard" x="-459" y="-450">M.type != PROB</label>
			<label kind="synchronisation" x="-459" y="-433">out[id]?</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id2"/>
			<label kind="guard" x="-374" y="-527">M.type != ANSWER</label>
			<label kind="synchronisation" x="-374" y="-510">out[id]?</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-297" y="-595">M.type != COMM || M.key != shared_key</label>
			<label kind="synchronisation" x="-297" y="-578">out[id]?</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="153" y="-416">in[id]!</label>
			<nail x="238" y="-391"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="guard" x="-8" y="-637">M.type == COMM &amp;&amp; M.key == shared_key</label>
			<label kind="synchronisation" x="-8" y="-620">out[id]?</label>
			<label kind="assignment" x="-8" y="-603">receive()</label>
			<nail x="51" y="-595"/>
			<nail x="170" y="-595"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id3"/>
			<label kind="guard" x="-161" y="-459">M.type == ANSWER</label>
			<label kind="synchronisation" x="-161" y="-442">out[id]?</label>
			<label kind="assignment" x="-161" y="-425">receive()</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="272" y="-195">in[id]!</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id4"/>
			<label kind="guard" x="-229" y="-289">M.type == PROB</label>
			<label kind="synchronisation" x="-229" y="-272">out[id]?</label>
			<label kind="assignment" x="-229" y="-255">receive()</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-272" y="-391">in[id]!</label>
			<label kind="assignment" x="-272" y="-374">prob()</label>
		</transition>
	</template>
	<template>
		<name>Reseau</name>
		<location id="id7" x="-8" y="-136">
			<committed/>
		</location>
		<location id="id8" x="-8" y="-17">
			<name x="-18" y="-51">Safe</name>
		</location>
		<init ref="id8"/>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="10" y="-153">out[M.receiver]!</label>
			<nail x="85" y="-136"/>
			<nail x="85" y="-17"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="select" x="-8" y="-110">e : id_a</label>
			<label kind="synchronisation" x="-8" y="-80">in[e]?</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
Alice = Acteur(0);
Bob = Acteur(1);

// List one or more processes to be composed into a system.
system Alice,Bob,Reseau;</system>
	<queries>
		<query>
			<formula>A[] not deadlock
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
